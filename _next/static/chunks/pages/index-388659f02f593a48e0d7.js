_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[9],{RNiq:function(e,n,t){"use strict";t.r(n);var r=t("nKUr"),s=t("q1tI"),o=t("wZee"),a=t.n(o),i=function(){return Object(r.jsx)("div",{id:"skrollr-body",children:Object(r.jsx)("div",{id:"top","data-top":"bottom: 0px; opacity: 1;","data-top-bottom":"bottom: -350px; opacity: .3;",children:Object(r.jsx)("div",{className:"grid-container",children:Object(r.jsx)("div",{className:"grid-100",children:Object(r.jsxs)("div",{id:"title-main",children:[Object(r.jsx)("h1",{children:"react-papaparse"}),Object(r.jsx)("h2",{children:"The powerful, in-browser React CSV parser for big boys and girls"}),Object(r.jsxs)("a",{href:"#download",className:"button",children:[Object(r.jsx)("i",{className:"fa fa-download"}),"\xa0 Install"]}),Object(r.jsxs)("a",{href:"/demo",className:"button red",children:[Object(r.jsx)("i",{className:"fa fa-magic"}),"\xa0 Demo"]}),Object(r.jsxs)("a",{href:"/docs",className:"button gray",children:[Object(r.jsx)("i",{className:"fa fa-book"}),"\xa0 Documentation"]})]})})})})})},c=function(){return Object(r.jsxs)(r.Fragment,{children:[Object(r.jsx)("header",{children:Object(r.jsxs)("div",{className:"grid-container",children:[Object(r.jsx)("div",{className:"grid-40 mobile-grid-50",children:Object(r.jsxs)("div",{className:"links",children:[Object(r.jsxs)("a",{href:"/demo",children:[Object(r.jsx)("i",{className:"fa fa-magic fa-lg"})," Demo"]}),Object(r.jsxs)("a",{href:"/docs",children:[Object(r.jsx)("i",{className:"fa fa-book fa-lg"})," Docs"]})]})}),Object(r.jsx)("div",{className:"grid-20 hide-on-mobile text-center",children:Object(r.jsx)("a",{href:"/",className:"text-logo",children:"react-papaparse 4"})}),Object(r.jsx)("div",{className:"grid-40 mobile-grid-50 text-right",children:Object(r.jsx)("div",{className:"links",children:Object(r.jsxs)("a",{href:"https://github.com/Bunlong/react-papaparse",children:[Object(r.jsx)("i",{className:"fa fa-github fa-lg"})," GitHub"]})})})]})}),Object(r.jsx)("div",{className:"insignia",children:Object(r.jsxs)("div",{className:"firefox-hack",children:[Object(r.jsx)("div",{id:"version-intro",children:"Version"}),Object(r.jsx)("div",{id:"version",children:"4"})]})})]})},l=function(){return Object(r.jsxs)("section",{style:{paddingTop:0},children:[Object(r.jsx)("div",{className:"grid-container",children:Object(r.jsx)("div",{className:"grid-100",children:Object(r.jsx)("h3",{children:"Features"})})}),Object(r.jsxs)("div",{id:"ticker",children:[Object(r.jsx)("div",{className:"ticker-item current",children:Object(r.jsx)("p",{children:"Now the fastest React CSV parser for the browser"})}),Object(r.jsx)("div",{className:"ticker-item",children:Object(r.jsx)("p",{children:"The world's first multi-threaded CSV parser for the browser"})}),Object(r.jsx)("div",{className:"ticker-item",children:Object(r.jsx)("p",{children:"react-papaparse can handle files gigabytes in size without crashing"})}),Object(r.jsx)("div",{className:"ticker-item",children:Object(r.jsx)("p",{children:"Use react-papaparse when performance, privacy, and correctness matter to you"})}),Object(r.jsx)("div",{className:"ticker-item",children:Object(r.jsx)("p",{children:"react-papaparse alleviates privacy concerns related to uploading files"})}),Object(r.jsx)("div",{className:"ticker-item",children:Object(r.jsx)("p",{children:"Malformed CSV is handled gracefully with a detailed error report"})})]}),Object(r.jsxs)("div",{className:"grid-container",children:[Object(r.jsxs)("div",{className:"grid-33",children:[Object(r.jsxs)("li",{children:["CSV\u2192JSON and ",Object(r.jsx)("a",{href:"#unparse",children:"JSON\u2192CSV"})]}),Object(r.jsxs)("li",{children:["Auto-detect ",Object(r.jsx)("a",{href:"#delimiter",children:"delimiter"})]}),Object(r.jsx)("li",{children:Object(r.jsx)("a",{href:"#local-files",children:"Open local files"})}),Object(r.jsx)("li",{children:Object(r.jsx)("a",{href:"#remote-files",children:"Download remote files"})})]}),Object(r.jsxs)("div",{className:"grid-33",children:[Object(r.jsxs)("li",{children:[Object(r.jsx)("a",{href:"#stream",children:"Stream"})," local and remote files"]}),Object(r.jsx)("li",{children:Object(r.jsx)("a",{href:"#worker",children:"Multi-threaded"})}),Object(r.jsxs)("li",{children:[Object(r.jsx)("a",{href:"#header",children:"Header row"})," support"]}),Object(r.jsx)("li",{children:Object(r.jsx)("a",{href:"#type-conversion",children:"Type conversion"})})]}),Object(r.jsxs)("div",{className:"grid-33",children:[Object(r.jsxs)("li",{children:["Skip ",Object(r.jsx)("a",{href:"#comments",children:"commented lines"})]}),Object(r.jsx)("li",{children:"Fast mode and easy to use"}),Object(r.jsxs)("li",{children:["Graceful ",Object(r.jsx)("a",{href:"#errors",children:"error"})," handling"]}),Object(r.jsx)("li",{children:Object(r.jsx)("a",{href:"#csv-downloader",children:"CSVDownloader"})})]}),Object(r.jsx)("div",{className:"clear"}),Object(r.jsx)("br",{}),Object(r.jsx)("br",{}),Object(r.jsxs)("div",{className:"grid-100 text-center",children:[Object(r.jsxs)("a",{href:"https://github.com/Bunlong/react-papaparse",className:"button",children:[Object(r.jsx)("i",{className:"fa fa-github"}),"\xa0 GitHub"]}),Object(r.jsxs)("a",{href:"/docs",className:"button gray",children:[Object(r.jsx)("i",{className:"fa fa-book"}),"\xa0 Documentation"]})]})]})]})},d=function(){return Object(r.jsx)("section",{children:Object(r.jsx)("div",{className:"grid-container narrow-grid",children:Object(r.jsxs)("div",{className:"grid-100",children:[Object(r.jsx)("h3",{children:"Frameworks"}),Object(r.jsxs)("p",{children:["react-papaparse strongly support"," ",Object(r.jsx)("a",{href:"https://nextjs.org",target:"blank",children:"Next.js"}),","," ",Object(r.jsx)("a",{href:"https://create-react-app.dev",target:"blank",children:"Create React App"})," ","and other React frameworks. react-papaparse is the fastest React CSV parser for the browser (only works in the browser), so you need to set the component with no SSR (server-side render)"," ",Object(r.jsxs)("b",{children:["in case you use ",Object(r.jsx)("code",{children:"readRemoteFile"})," function"]}),"."]}),Object(r.jsx)("div",{children:Object(r.jsx)("ul",{children:Object(r.jsx)("li",{children:Object(r.jsx)("a",{href:"https://nextjs.org/docs/advanced-features/dynamic-import#with-no-ssr",target:"blank",children:"Next.js \u2014 component with no SSR"})})})})]})})})},j=function(){return Object(r.jsx)("section",{children:Object(r.jsx)("div",{className:"grid-container",children:Object(r.jsxs)("div",{className:"grid-100 text-center",children:[Object(r.jsxs)("h3",{children:["People ",Object(r.jsx)("i",{className:"fa fa-heart"})," react-papaparse"]}),Object(r.jsxs)("p",{children:[Object(r.jsx)("a",{href:"https://www.npmjs.com/package/react-papaparse",children:Object(r.jsx)("img",{src:"https://img.shields.io/npm/dm/react-papaparse.svg",alt:"react-papaparse"})}),"\xa0",Object(r.jsx)("a",{href:"https://www.npmjs.com/package/react-papaparse",children:Object(r.jsx)("img",{src:"https://img.shields.io/npm/dt/react-papaparse.svg?label=total%20downloads",alt:"react-papaparse"})})]})]})})})},p=function(){return Object(r.jsx)("section",{id:"parse",children:Object(r.jsx)("div",{className:"grid-container narrow-grid",children:Object(r.jsxs)("div",{className:"grid-100",children:[Object(r.jsx)("h4",{children:"CSV Parsing"}),Object(r.jsxs)("h5",{children:["\"Isn't parsing CSV just ",Object(r.jsx)("code",{children:"String.split(',')"}),'?"']}),Object(r.jsxs)("p",{children:["react-papaparse does it right. Just pass in the CSV string with an optional ",Object(r.jsx)("a",{href:"/docs#config",children:"configuration"}),"."]}),Object(r.jsx)("pre",{children:Object(r.jsx)("code",{className:"language-javascript",children:"import React from 'react';\n\nimport { usePapaParse } from 'react-papaparse';\n\nexport default function ReadString() {\n  const { readString } = usePapaParse();\n\n  const handleReadString = () => {\n    const csvString = 'Column 1,Column 2,Column 3,Column 4\n1-1,1-2,1-3,1-4\n2-1,2-2,2-3,2-4\n3-1,3-2,3-3,3-4\n4,5,6,7';\n\n    readString(csvString, {\n      worker: true,\n      complete: (results) => {\n        console.log('---------------------------');\n        console.log(results);\n        console.log('---------------------------');\n      },\n    });\n  };\n\n  return <button onClick={() => handleReadString()}>readString</button>;\n}\n\n/*\nresults = {\n  data: [ ... ],    // parsed data\n  errors: [ ... ],  // errors encountered\n  meta: { ... }     // extra parse info\n}\n*/"})})]})})})},h=function(){return Object(r.jsx)("section",{id:"delimiter",children:Object(r.jsx)("div",{className:"grid-container narrow-grid",children:Object(r.jsxs)("div",{className:"grid-100",children:[Object(r.jsx)("h4",{children:"Delimiter Detection"}),Object(r.jsx)("h5",{children:'"But I don\'t know the delimiter..."'}),Object(r.jsx)("p",{children:"That's okay. react-papaparse will scan the first few rows to find the right delimiter."}),Object(r.jsx)("pre",{children:Object(r.jsxs)("code",{className:"language-javascript",children:["const config = {\n  worker: true,\n  complete: (results) => {\n    console.log('---------------------------');\n    console.log(results.meta.delimiter);\n    console.log('---------------------------');\n  },\n};\n\nreadString(csvString, config);\n\n",Object(r.jsxs)("span",{children:[String.fromCharCode(47),String.fromCharCode(47),' "',String.fromCharCode(92),'t"']})]})})]})})})},m=function(){return Object(r.jsx)("section",{id:"local-files",children:Object(r.jsx)("div",{className:"grid-container narrow-grid",children:Object(r.jsxs)("div",{className:"grid-100",children:[Object(r.jsx)("h4",{children:"Local Files"}),Object(r.jsxs)("h5",{children:['"Great, but I have a ',Object(r.jsx)("i",{children:"file"}),' to parse."']}),Object(r.jsx)("p",{children:"Then use CSVReader component instead of readString method. Since file parsing is asynchronous, don't forget callback methods."}),Object(r.jsx)("div",{id:"drag-no-click-upload",style:{fontSize:20,marginTop:10},children:"Basic Upload"}),Object(r.jsx)("div",{style:{textAlign:"center",paddingTop:50,paddingBottom:50},children:Object(r.jsx)("img",{src:"/static/images/csvreader1.png",alt:"Basic Upload",style:{maxWidth:"100%",height:"auto"}})}),Object(r.jsxs)("div",{style:{display:"flex",justifyContent:"flex-end",marginBottom:14},children:[Object(r.jsx)("a",{href:"/docs#basic-upload",children:"Properties"}),"\xa0 | \xa0",Object(r.jsx)("a",{href:"/demo",children:"Demo"})]}),Object(r.jsx)("pre",{children:Object(r.jsx)("code",{className:"language-javascript",children:"import React, { CSSProperties } from 'react';\n\nimport { useCSVReader } from 'react-papaparse';\n\nconst styles = {\n  csvReader: {\n    display: 'flex',\n    flexDirection: 'row',\n    marginBottom: 10,\n  } as CSSProperties,\n  browseFile: {\n    width: '20%',\n  } as CSSProperties,\n  acceptedFile: {\n    border: '1px solid #ccc',\n    height: 45,\n    lineHeight: 2.5,\n    paddingLeft: 10,\n    width: '80%',\n  } as CSSProperties,\n  remove: {\n    borderRadius: 0,\n    padding: '0 20px',\n  } as CSSProperties,\n  progressBarBackgroundColor: {\n    backgroundColor: 'red',\n  } as CSSProperties,\n};\n\nexport default function CSVReader() {\n  const { CSVReader } = useCSVReader();\n\n  return (\n    <CSVReader\n      onUploadAccepted={(results: any) => {\n        console.log('---------------------------');\n        console.log(results);\n        console.log('---------------------------');\n      }}\n    >\n      {({\n        getRootProps,\n        acceptedFile,\n        ProgressBar,\n        getRemoveFileProps,\n      }: any) => (\n        <>\n          <div style={styles.csvReader}>\n            <button type='button' {...getRootProps()} style={styles.browseFile}>\n              Browse file\n            </button>\n            <div style={styles.acceptedFile}>\n              {acceptedFile && acceptedFile.name}\n            </div>\n            <button {...getRemoveFileProps()} style={styles.remove}>\n              Remove\n            </button>\n          </div>\n          <ProgressBar style={styles.progressBarBackgroundColor} />\n        </>\n      )}\n    </CSVReader>\n  );\n}"})}),Object(r.jsx)("div",{id:"drag-no-click-upload",style:{fontSize:20,marginTop:35},children:"Click and Drag Upload"}),Object(r.jsx)("div",{style:{textAlign:"center",paddingTop:50,paddingBottom:50},children:Object(r.jsx)("img",{src:"/static/images/csvreader2.png",alt:"Click and Drag Upload",style:{maxWidth:"100%",height:"auto"}})}),Object(r.jsxs)("div",{style:{display:"flex",justifyContent:"flex-end",marginBottom:14},children:[Object(r.jsx)("a",{href:"/docs#click-and-drag-upload",children:"Properties"}),"\xa0 | \xa0",Object(r.jsx)("a",{href:"/demo",children:"Demo"})]}),Object(r.jsx)("pre",{children:Object(r.jsx)("code",{className:"language-javascript",children:"import React, { useState, CSSProperties } from 'react';\n\nimport {\n  useCSVReader,\n  lightenDarkenColor,\n  formatFileSize,\n} from 'react-papaparse';\n\nconst GREY = '#CCC';\nconst GREY_LIGHT = 'rgba(255, 255, 255, 0.4)';\nconst DEFAULT_REMOVE_HOVER_COLOR = '#A01919';\nconst REMOVE_HOVER_COLOR_LIGHT = lightenDarkenColor(\n  DEFAULT_REMOVE_HOVER_COLOR,\n  40\n);\nconst GREY_DIM = '#686868';\n\nconst styles = {\n  zone: {\n    alignItems: 'center',\n    borderWidth: 2,\n    borderStyle: 'dashed',\n    borderColor: GREY,\n    borderRadius: 20,\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    justifyContent: 'center',\n    padding: 20,\n  } as CSSProperties,\n  file: {\n    background: 'linear-gradient(to bottom, #EEE, #DDD)',\n    borderRadius: 20,\n    display: 'flex',\n    height: 120,\n    width: 120,\n    position: 'relative',\n    zIndex: 10,\n    flexDirection: 'column',\n    justifyContent: 'center',\n  } as CSSProperties,\n  info: {\n    alignItems: 'center',\n    display: 'flex',\n    flexDirection: 'column',\n    paddingLeft: 10,\n    paddingRight: 10,\n  } as CSSProperties,\n  size: {\n    backgroundColor: GREY_LIGHT,\n    borderRadius: 3,\n    marginBottom: '0.5em',\n    justifyContent: 'center',\n    display: 'flex',\n  } as CSSProperties,\n  name: {\n    backgroundColor: GREY_LIGHT,\n    borderRadius: 3,\n    fontSize: 12,\n    marginBottom: '0.5em',\n  } as CSSProperties,\n  progressBar: {\n    bottom: 14,\n    position: 'absolute',\n    width: '100%',\n    paddingLeft: 10,\n    paddingRight: 10,\n  } as CSSProperties,\n  zoneHover: {\n    borderColor: GREY_DIM,\n  } as CSSProperties,\n  default: {\n    borderColor: GREY,\n  } as CSSProperties,\n  remove: {\n    height: 23,\n    position: 'absolute',\n    right: 6,\n    top: 6,\n    width: 23,\n  } as CSSProperties,\n};\n\nexport default function CSVReader() {\n  const { CSVReader } = useCSVReader();\n  const [zoneHover, setZoneHover] = useState(false);\n  const [removeHoverColor, setRemoveHoverColor] = useState(\n    DEFAULT_REMOVE_HOVER_COLOR\n  );\n\n  return (\n    <CSVReader\n      onUploadAccepted={(results: any) => {\n        console.log('---------------------------');\n        console.log(results);\n        console.log('---------------------------');\n        setZoneHover(false);\n      }}\n      onDragOver={(event: DragEvent) => {\n        event.preventDefault();\n        setZoneHover(true);\n      }}\n      onDragLeave={(event: DragEvent) => {\n        event.preventDefault();\n        setZoneHover(false);\n      }}\n    >\n      {({\n        getRootProps,\n        acceptedFile,\n        ProgressBar,\n        getRemoveFileProps,\n        Remove,\n      }: any) => (\n        <>\n          <div\n            {...getRootProps()}\n            style={Object.assign(\n              {},\n              styles.zone,\n              zoneHover && styles.zoneHover\n            )}\n          >\n            {acceptedFile ? (\n              <>\n                <div style={styles.file}>\n                  <div style={styles.info}>\n                    <span style={styles.size}>\n                      {formatFileSize(acceptedFile.size)}\n                    </span>\n                    <span style={styles.name}>{acceptedFile.name}</span>\n                  </div>\n                  <div style={styles.progressBar}>\n                    <ProgressBar />\n                  </div>\n                  <div\n                    {...getRemoveFileProps()}\n                    style={styles.remove}\n                    onMouseOver={(event: Event) => {\n                      event.preventDefault();\n                      setRemoveHoverColor(REMOVE_HOVER_COLOR_LIGHT);\n                    }}\n                    onMouseOut={(event: Event) => {\n                      event.preventDefault();\n                      setRemoveHoverColor(DEFAULT_REMOVE_HOVER_COLOR);\n                    }}\n                  >\n                    <Remove color={removeHoverColor} />\n                  </div>\n                </div>\n              </>\n            ) : (\n              'Drop CSV file here or click to upload'\n            )}\n          </div>\n        </>\n      )}\n    </CSVReader>\n  );\n}"})}),Object(r.jsx)("div",{id:"drag-no-click-upload",style:{fontSize:20,marginTop:35},children:"Drag ( No Click ) Upload"}),Object(r.jsx)("div",{style:{textAlign:"center",paddingTop:50,paddingBottom:50},children:Object(r.jsx)("img",{src:"/static/images/csvreader3.png",alt:"Drag ( No Click ) Upload",style:{maxWidth:"100%",height:"auto"}})}),Object(r.jsxs)("div",{style:{display:"flex",justifyContent:"flex-end",marginBottom:14},children:[Object(r.jsx)("a",{href:"/docs#drag-no-click-upload",children:"Properties"}),"\xa0 | \xa0",Object(r.jsx)("a",{href:"/demo",children:"Demo"})]}),Object(r.jsx)("pre",{children:Object(r.jsx)("code",{className:"language-javascript",children:"import React, { useState, CSSProperties } from 'react';\n\nimport {\n  useCSVReader,\n  lightenDarkenColor,\n  formatFileSize,\n} from 'react-papaparse';\n\nconst GREY = '#CCC';\nconst GREY_LIGHT = 'rgba(255, 255, 255, 0.4)';\nconst DEFAULT_REMOVE_HOVER_COLOR = '#A01919';\nconst REMOVE_HOVER_COLOR_LIGHT = lightenDarkenColor(\n  DEFAULT_REMOVE_HOVER_COLOR,\n  40\n);\nconst GREY_DIM = '#686868';\n\nconst styles = {\n  zone: {\n    alignItems: 'center',\n    borderWidth: 2,\n    borderStyle: 'dashed',\n    borderColor: GREY,\n    borderRadius: 20,\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    justifyContent: 'center',\n    padding: 20,\n  } as CSSProperties,\n  file: {\n    background: 'linear-gradient(to bottom, #EEE, #DDD)',\n    borderRadius: 20,\n    display: 'flex',\n    height: 120,\n    width: 120,\n    position: 'relative',\n    zIndex: 10,\n    flexDirection: 'column',\n    justifyContent: 'center',\n  } as CSSProperties,\n  info: {\n    alignItems: 'center',\n    display: 'flex',\n    flexDirection: 'column',\n    paddingLeft: 10,\n    paddingRight: 10,\n  } as CSSProperties,\n  size: {\n    backgroundColor: GREY_LIGHT,\n    borderRadius: 3,\n    marginBottom: '0.5em',\n    justifyContent: 'center',\n    display: 'flex',\n  } as CSSProperties,\n  name: {\n    backgroundColor: GREY_LIGHT,\n    borderRadius: 3,\n    fontSize: 12,\n    marginBottom: '0.5em',\n  } as CSSProperties,\n  progressBar: {\n    bottom: 14,\n    position: 'absolute',\n    width: '100%',\n    paddingLeft: 10,\n    paddingRight: 10,\n  } as CSSProperties,\n  zoneHover: {\n    borderColor: GREY_DIM,\n  } as CSSProperties,\n  default: {\n    borderColor: GREY,\n  } as CSSProperties,\n  remove: {\n    height: 23,\n    position: 'absolute',\n    right: 6,\n    top: 6,\n    width: 23,\n  } as CSSProperties,\n};\n\nexport default function CSVReader() {\n  const { CSVReader } = useCSVReader();\n  const [zoneHover, setZoneHover] = useState(false);\n  const [removeHoverColor, setRemoveHoverColor] = useState(\n    DEFAULT_REMOVE_HOVER_COLOR\n  );\n\n  return (\n    <CSVReader\n      onUploadAccepted={(results: any) => {\n        console.log('---------------------------');\n        console.log(results);\n        console.log('---------------------------');\n        setZoneHover(false);\n      }}\n      onDragOver={(event: DragEvent) => {\n        event.preventDefault();\n        setZoneHover(true);\n      }}\n      onDragLeave={(event: DragEvent) => {\n        event.preventDefault();\n        setZoneHover(false);\n      }}\n      noClick\n    >\n      {({\n        getRootProps,\n        acceptedFile,\n        ProgressBar,\n        getRemoveFileProps,\n        Remove,\n      }: any) => (\n        <>\n          <div\n            {...getRootProps()}\n            style={Object.assign(\n              {},\n              styles.zone,\n              zoneHover && styles.zoneHover\n            )}\n          >\n            {acceptedFile ? (\n              <>\n                <div style={styles.file}>\n                  <div style={styles.info}>\n                    <span style={styles.size}>\n                      {formatFileSize(acceptedFile.size)}\n                    </span>\n                    <span style={styles.name}>{acceptedFile.name}</span>\n                  </div>\n                  <div style={styles.progressBar}>\n                    <ProgressBar />\n                  </div>\n                  <div\n                    {...getRemoveFileProps()}\n                    style={styles.remove}\n                    onMouseOver={(event: Event) => {\n                      event.preventDefault();\n                      setRemoveHoverColor(REMOVE_HOVER_COLOR_LIGHT);\n                    }}\n                    onMouseOut={(event: Event) => {\n                      event.preventDefault();\n                      setRemoveHoverColor(DEFAULT_REMOVE_HOVER_COLOR);\n                    }}\n                  >\n                    <Remove color={removeHoverColor} />\n                  </div>\n                </div>\n              </>\n            ) : (\n              'Drop CSV file here to upload'\n            )}\n          </div>\n        </>\n      )}\n    </CSVReader>\n  );\n}"})}),Object(r.jsx)("div",{id:"drag-no-click-upload",style:{fontSize:20,marginTop:35},children:"Click ( No Drag ) Upload"}),Object(r.jsx)("div",{style:{textAlign:"center",paddingTop:50,paddingBottom:50},children:Object(r.jsx)("img",{src:"/static/images/csvreader4.png",alt:"Click ( No Drag ) Upload",style:{maxWidth:"100%",height:"auto "}})}),Object(r.jsxs)("div",{style:{display:"flex",justifyContent:"flex-end",marginBottom:14},children:[Object(r.jsx)("a",{href:"/docs#click-no-drag-upload",children:"Properties"}),"\xa0 | \xa0",Object(r.jsx)("a",{href:"/demo",children:"Demo"})]}),Object(r.jsx)("pre",{children:Object(r.jsx)("code",{className:"language-javascript",children:"import React, { useState, CSSProperties } from 'react';\n\nimport {\n  useCSVReader,\n  lightenDarkenColor,\n  formatFileSize,\n} from 'react-papaparse';\n\nconst GREY = '#CCC';\nconst GREY_LIGHT = 'rgba(255, 255, 255, 0.4)';\nconst DEFAULT_REMOVE_HOVER_COLOR = '#A01919';\nconst REMOVE_HOVER_COLOR_LIGHT = lightenDarkenColor(\n  DEFAULT_REMOVE_HOVER_COLOR,\n  40\n);\nconst GREY_DIM = '#686868';\n\nconst styles = {\n  zone: {\n    alignItems: 'center',\n    borderWidth: 2,\n    borderStyle: 'dashed',\n    borderColor: GREY,\n    borderRadius: 20,\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%',\n    justifyContent: 'center',\n    padding: 20,\n  } as CSSProperties,\n  file: {\n    background: 'linear-gradient(to bottom, #EEE, #DDD)',\n    borderRadius: 20,\n    display: 'flex',\n    height: 120,\n    width: 120,\n    position: 'relative',\n    zIndex: 10,\n    flexDirection: 'column',\n    justifyContent: 'center',\n  } as CSSProperties,\n  info: {\n    alignItems: 'center',\n    display: 'flex',\n    flexDirection: 'column',\n    paddingLeft: 10,\n    paddingRight: 10,\n  } as CSSProperties,\n  size: {\n    backgroundColor: GREY_LIGHT,\n    borderRadius: 3,\n    marginBottom: '0.5em',\n    justifyContent: 'center',\n    display: 'flex',\n  } as CSSProperties,\n  name: {\n    backgroundColor: GREY_LIGHT,\n    borderRadius: 3,\n    fontSize: 12,\n    marginBottom: '0.5em',\n  } as CSSProperties,\n  progressBar: {\n    bottom: 14,\n    position: 'absolute',\n    width: '100%',\n    paddingLeft: 10,\n    paddingRight: 10,\n  } as CSSProperties,\n  zoneHover: {\n    borderColor: GREY_DIM,\n  } as CSSProperties,\n  default: {\n    borderColor: GREY,\n  } as CSSProperties,\n  remove: {\n    height: 23,\n    position: 'absolute',\n    right: 6,\n    top: 6,\n    width: 23,\n  } as CSSProperties,\n};\n\nexport default function CSVReader() {\n  const { CSVReader } = useCSVReader();\n  const [zoneHover, setZoneHover] = useState(false);\n  const [removeHoverColor, setRemoveHoverColor] = useState(\n    DEFAULT_REMOVE_HOVER_COLOR\n  );\n\n  return (\n    <CSVReader\n      onUploadAccepted={(results: any) => {\n        console.log('---------------------------');\n        console.log(results);\n        console.log('---------------------------');\n        setZoneHover(false);\n      }}\n      onDragOver={(event: DragEvent) => {\n        event.preventDefault();\n        setZoneHover(true);\n      }}\n      onDragLeave={(event: DragEvent) => {\n        event.preventDefault();\n        setZoneHover(false);\n      }}\n      noDrag\n    >\n      {({\n        getRootProps,\n        acceptedFile,\n        ProgressBar,\n        getRemoveFileProps,\n        Remove,\n      }: any) => (\n        <>\n          <div\n            {...getRootProps()}\n            style={Object.assign(\n              {},\n              styles.zone,\n              zoneHover && styles.zoneHover\n            )}\n          >\n            {acceptedFile ? (\n              <>\n                <div style={styles.file}>\n                  <div style={styles.info}>\n                    <span style={styles.size}>\n                      {formatFileSize(acceptedFile.size)}\n                    </span>\n                    <span style={styles.name}>{acceptedFile.name}</span>\n                  </div>\n                  <div style={styles.progressBar}>\n                    <ProgressBar />\n                  </div>\n                  <div\n                    {...getRemoveFileProps()}\n                    style={styles.remove}\n                    onMouseOver={(event: Event) => {\n                      event.preventDefault();\n                      setRemoveHoverColor(REMOVE_HOVER_COLOR_LIGHT);\n                    }}\n                    onMouseOut={(event: Event) => {\n                      event.preventDefault();\n                      setRemoveHoverColor(DEFAULT_REMOVE_HOVER_COLOR);\n                    }}\n                  >\n                    <Remove color={removeHoverColor} />\n                  </div>\n                </div>\n              </>\n            ) : (\n              'Click to upload'\n            )}\n          </div>\n        </>\n      )}\n    </CSVReader>\n  );\n}"})})]})})})},b=function(){return Object(r.jsx)("section",{id:"remote-files",children:Object(r.jsx)("div",{className:"grid-container narrow-grid",children:Object(r.jsxs)("div",{className:"grid-100",children:[Object(r.jsx)("h4",{children:"Remote Files"}),Object(r.jsx)("h5",{children:'"No \u2014 I mean, the file isn\'t on my computer."'}),Object(r.jsx)("p",{children:"Oh, well then just pass in the URL and \u2014 of course \u2014 a callback."}),Object(r.jsx)("pre",{children:Object(r.jsx)("code",{className:"language-javascript",children:"import React from 'react';\n\nimport { usePapaParse } from 'react-papaparse';\n\nexport default function ReadRemoteFile() {\n  const { readRemoteFile } = usePapaParse();\n\n  const handleReadRemoteFile = () => {\n    readRemoteFile(url, {\n      complete: (results) => {\n        console.log('---------------------------');\n        console.log('Results:', results);\n        console.log('---------------------------');\n      },\n    });\n  };\n\n  return <button onClick={() => handleReadRemoteFile()}>readRemoteFile</button>;\n}"})})]})})})},g=function(){return Object(r.jsx)("section",{id:"stream",children:Object(r.jsx)("div",{className:"grid-container narrow-grid",children:Object(r.jsxs)("div",{className:"grid-100",children:[Object(r.jsx)("h4",{children:"Streaming"}),Object(r.jsx)("h5",{children:'"Did I mention the file is huge?"'}),Object(r.jsx)("p",{children:"That's what streaming is for. Specify a step callback to receive the results row-by-row. This way, you won't load the whole file into memory and crash the browser."}),Object(r.jsx)("pre",{children:Object(r.jsx)("code",{className:"language-javascript",children:"readRemoteFile(url, {\n  step: (row) => {\n    console.log('Row:', row.data)\n  },\n  complete: () => {\n    console.log('All done!')\n  }\n});"})})]})})})},u=function(){return Object(r.jsx)("section",{id:"worker",children:Object(r.jsx)("div",{className:"grid-container narrow-grid",children:Object(r.jsxs)("div",{className:"grid-100",children:[Object(r.jsx)("h4",{children:"Multi-Threading"}),Object(r.jsx)("h5",{children:"'Lovely. Now my web page locked up.'"}),Object(r.jsxs)("p",{children:["That happens when a long-running script is executing in the same thread as the page. Use a"," ",Object(r.jsx)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/Worker",children:"Worker"})," ","thread by specifying ",Object(r.jsx)("code",{children:"worker: true"}),". It may take slightly longer, but your page will stay reactive."]}),Object(r.jsx)("pre",{children:Object(r.jsx)("code",{className:"language-javascript",children:"readRemoteFile(bigFileURL, {\n  worker: true,\n  step: (row) => {\n    console.log('Row:', row.data)\n  },\n  complete: () => {\n    console.log('All done!')\n  }\n});"})})]})})})},O=function(){return Object(r.jsx)("section",{id:"header",children:Object(r.jsx)("div",{className:"grid-container narrow-grid",children:Object(r.jsxs)("div",{className:"grid-100",children:[Object(r.jsx)("h4",{children:"Header Row"}),Object(r.jsx)("h5",{children:'"Great! Now I want data keyed by field name."'}),Object(r.jsx)("p",{children:"If you tell react-papaparse there is a header row, each row will be organized by field name instead of index."}),Object(r.jsx)("pre",{children:Object(r.jsx)("code",{className:"language-javascript",children:"// Key data by field name instead of index/position\nreadString(csvString, {\n  worker: true,\n  complete: (results) => {\n    console.log(results)\n  },\n  header: true\n})"})})]})})})},x=function(){return Object(r.jsx)("section",{id:"type-conversion",children:Object(r.jsx)("div",{className:"grid-container narrow-grid",children:Object(r.jsxs)("div",{className:"grid-100",children:[Object(r.jsx)("h4",{children:"Type Conversion"}),Object(r.jsx)("h5",{children:'"Hey, these numbers are parsed as strings."'}),Object(r.jsxs)("p",{children:[Object(r.jsx)("i",{children:"Everything"})," is parsed as strings. If you want numbers and booleans, you can enable dynamic typing to do the conversion for you."]}),Object(r.jsx)("pre",{children:Object(r.jsx)("code",{className:"language-javascript",children:"// Converts numeric/boolean data\nreadString(csvString, {\n  worker: true,\n  complete: (results) => {\n    console.log(results)\n  },\n  dynamicTyping: true\n})"})})]})})})},f=function(){return Object(r.jsx)("section",{id:"comments",children:Object(r.jsx)("div",{className:"grid-container narrow-grid",children:Object(r.jsxs)("div",{className:"grid-100",children:[Object(r.jsx)("h4",{children:"Comments"}),Object(r.jsx)("h5",{children:'"I forgot to mention: my CSV files have comments in them."'}),Object(r.jsx)("p",{children:"Okay, first off: that's really weird. But fortunately, you can skip those lines... just specify the comment string."}),Object(r.jsx)("pre",{children:Object(r.jsx)("code",{className:"language-javascript",children:"// Mostly found in academia, some CSV files\n// may have commented lines in them\nreadString(csvString, {\n  worker: true,\n  complete: (results) => {\n    console.log(results)\n  },\n  comments: '#'\n})"})})]})})})},v=function(){return Object(r.jsx)("section",{id:"errors",children:Object(r.jsx)("div",{className:"grid-container narrow-grid",children:Object(r.jsxs)("div",{className:"grid-100",children:[Object(r.jsx)("h4",{children:"Error Handling"}),Object(r.jsx)("h5",{children:'"Aw, shoot. Errors."'}),Object(r.jsxs)("p",{children:["react-papaparse handles errors pretty well. The"," ",Object(r.jsx)("a",{href:"http://tools.ietf.org/html/rfc4180",children:"CSV standard"})," is somewhat ",Object(r.jsx)("strike",{children:"loose"})," ambiguous, so react-papaparse is designed for edge cases. For example, mismatched fields won't break parsing."]}),Object(r.jsx)("pre",{children:Object(r.jsx)("code",{className:"language-javascript",children:"// Example error:\n{\n  type: 'FieldMismatch',\n  code: 'TooManyFields',\n  message: 'Expected 3 fields, but parsed 4',\n  row: 1\n}"})})]})})})},C=function(){return Object(r.jsx)("section",{id:"unparse",children:Object(r.jsx)("div",{className:"grid-container narrow-grid",children:Object(r.jsxs)("div",{className:"grid-100",children:[Object(r.jsx)("h4",{children:"JSON to CSV"}),Object(r.jsx)("h5",{children:'"Last thing: what about converting JSON to CSV?"'}),Object(r.jsxs)("p",{children:["Use ",Object(r.jsx)("code",{children:"jsonToCSV()"})," function, passing in your array of arrays or array of objects. react-papaparse will figure it out."]}),Object(r.jsx)("pre",{children:Object(r.jsx)("code",{className:"language-javascript",children:'// Output is a properly-formatted CSV string.\n\nimport React from \'react\';\n\nimport { usePapaParse } from \'react-papaparse\';\n\nexport default function JsonToCSV() {\n  const { jsonToCSV } = usePapaParse();\n\n  const handleJsonToCSV = () => {\n    const jsonData = [\n      {\n          "Column 1": "1-1",\n          "Column 2": "1-2",\n          "Column 3": "1-3",\n          "Column 4": "1-4"\n      },\n      {\n          "Column 1": "2-1",\n          "Column 2": "2-2",\n          "Column 3": "2-3",\n          "Column 4": "2-4"\n      },\n      {\n          "Column 1": "3-1",\n          "Column 2": "3-2",\n          "Column 3": "3-3",\n          "Column 4": "3-4"\n      },\n      {\n          "Column 1": 4,\n          "Column 2": 5,\n          "Column 3": 6,\n          "Column 4": 7\n      }\n    ];\n    const results = jsonToCSV(jsonData);\n    console.log(\'---------------------------\');\n    console.log(\'Results:\', results);\n    console.log(\'---------------------------\');\n  };\n\n  return <button onClick={() => handleJsonToCSV()}>jsonToCSV</button>;\n}'})})]})})})},R=function(){return Object(r.jsx)("section",{id:"csv-downloader",children:Object(r.jsxs)("div",{className:"grid-container narrow-grid",children:[Object(r.jsxs)("div",{className:"grid-100",children:[Object(r.jsx)("h4",{children:"CSVDownloader"}),Object(r.jsx)("h5",{children:'"Allow to download CSV file from js object."'}),Object(r.jsxs)("p",{children:["Just pass in the js object with an optional"," ",Object(r.jsx)("a",{href:"/docs#config",children:"configuration"})," ( setting delimiter / separator )."]}),Object(r.jsx)("pre",{children:Object(r.jsx)("code",{className:"language-javascript",children:"import React from 'react';\n\nimport { useCSVDownloader } from 'react-papaparse';\n\nexport default function CSVDownloader() {\n  const { CSVDownloader, Type } = useCSVDownloader();\n\n  return (\n    <CSVDownloader\n      type={Type.Button}\n      filename={'filename'}\n      bom={true}\n      config={{\n        delimiter: ';',\n      }}\n      data={[\n        {\n          'Column 1': '1-1',\n          'Column 2': '1-2',\n          'Column 3': '1-3',\n          'Column 4': '1-4',\n        },\n        {\n          'Column 1': '2-1',\n          'Column 2': '2-2',\n          'Column 3': '2-3',\n          'Column 4': '2-4',\n        },\n        {\n          'Column 1': '3-1',\n          'Column 2': '3-2',\n          'Column 3': '3-3',\n          'Column 4': '3-4',\n        },\n        {\n          'Column 1': 4,\n          'Column 2': 5,\n          'Column 3': 6,\n          'Column 4': 7,\n        },\n      ]}\n    >\n      Download\n    </CSVDownloader>\n  );\n}"})})]}),Object(r.jsxs)("div",{className:"grid-100 break",children:[Object(r.jsxs)("p",{children:[Object(r.jsx)("code",{children:"data="})," can be a function that returns a data object."]}),Object(r.jsx)("pre",{children:Object(r.jsx)("code",{className:"language-javascript",children:'<CSVDownloader\n  filename={\'filename\'}\n  data={() => {\n    return [\n      {\n        "Column 1": "1-1",\n        "Column 2": "1-2",\n        "Column 3": "1-3",\n        "Column 4": "1-4",\n      }\n    ]}\n  }\n>\n  Download\n</CSVDownloader>'})})]})]})})},y=function(){return Object(r.jsx)("section",{id:"download",children:Object(r.jsxs)("div",{className:"grid-container",children:[Object(r.jsx)("div",{className:"grid-100",children:Object(r.jsx)("h3",{children:"Install"})}),Object(r.jsxs)("div",{className:"prefix-30 grid-40 suffix-30",children:[Object(r.jsx)("b",{style:{display:"block",textAlign:"center"},children:"npm"}),Object(r.jsx)("pre",{children:Object(r.jsx)("code",{className:"language-bash",children:"$ npm install react-papaparse --save"})}),Object(r.jsx)("br",{}),Object(r.jsx)("b",{style:{display:"block",textAlign:"center"},children:"yarn"}),Object(r.jsx)("pre",{children:Object(r.jsx)("code",{className:"language-bash",children:"$ yarn add react-papaparse --save"})})]}),Object(r.jsx)("div",{className:"clear"}),Object(r.jsxs)("div",{className:"grid-100 text-center",children:[Object(r.jsx)("br",{}),Object(r.jsx)("br",{}),Object(r.jsxs)("a",{href:"https://github.com/Bunlong/react-papaparse",className:"button",children:[Object(r.jsx)("i",{className:"fa fa-github"}),"\xa0 GitHub"]}),Object(r.jsxs)("a",{href:"/demo",className:"button red",children:[Object(r.jsx)("i",{className:"fa fa-magic"}),"\xa0 Demo"]}),Object(r.jsxs)("a",{href:"/docs",className:"button gray",children:[Object(r.jsx)("i",{className:"fa fa-book"}),"\xa0 Documentation"]})]})]})})};n.default=function(){return Object(s.useEffect)((function(){a.a.highlightAll()}),[]),Object(r.jsxs)(r.Fragment,{children:[Object(r.jsx)(i,{}),Object(r.jsxs)("main",{children:[Object(r.jsx)(c,{}),Object(r.jsx)(l,{}),Object(r.jsx)(d,{}),Object(r.jsx)(j,{}),Object(r.jsx)(p,{}),Object(r.jsx)(h,{}),Object(r.jsx)(m,{}),Object(r.jsx)(b,{}),Object(r.jsx)(g,{}),Object(r.jsx)(u,{}),Object(r.jsx)(O,{}),Object(r.jsx)(x,{}),Object(r.jsx)(f,{}),Object(r.jsx)(v,{}),Object(r.jsx)(C,{}),Object(r.jsx)(R,{}),Object(r.jsx)(y,{})]})]})}},vlRD:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/",function(){return t("RNiq")}])}},[["vlRD",1,0,2]]]);