{"version":3,"file":"static/development/pages/index.js","sources":["webpack:///./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js","webpack:///delegated ./node_modules/react/index.js from dll-reference dll_82519ec661270f7f484f","webpack:///./pages/index.js","webpack:///./src/components/screens/indexes/CSVParsing.js","webpack:///./src/components/screens/indexes/Comment.js","webpack:///./src/components/screens/indexes/Delimiter.js","webpack:///./src/components/screens/indexes/Download.js","webpack:///./src/components/screens/indexes/Error.js","webpack:///./src/components/screens/indexes/Feature.js","webpack:///./src/components/screens/indexes/Framework.js","webpack:///./src/components/screens/indexes/Header.js","webpack:///./src/components/screens/indexes/LocalFile.js","webpack:///./src/components/screens/indexes/Love.js","webpack:///./src/components/screens/indexes/Navbar.js","webpack:///./src/components/screens/indexes/RemoteFile.js","webpack:///./src/components/screens/indexes/Stream.js","webpack:///./src/components/screens/indexes/TypeConversion.js","webpack:///./src/components/screens/indexes/Unparse.js","webpack:///./src/components/screens/indexes/Welcome.js","webpack:///./src/components/screens/indexes/Worker.js","webpack:///external \"dll_82519ec661270f7f484f\""],"sourcesContent":["\n    (window.__NEXT_P=window.__NEXT_P||[]).push([\"/\", function() {\n      var mod = require(\"/home/bunlong/workspace/os/react-papaparse/docs/pages/index.js\")\n      if(module.hot) {\n        module.hot.accept(\"/home/bunlong/workspace/os/react-papaparse/docs/pages/index.js\", function() {\n          if(!next.router.components[\"/\"]) return\n          var updatedPage = require(\"/home/bunlong/workspace/os/react-papaparse/docs/pages/index.js\")\n          next.router.update(\"/\", updatedPage)\n        })\n      }\n      return mod\n    }]);\n  ","module.exports = (__webpack_require__(/*! dll-reference dll_82519ec661270f7f484f */ \"dll-reference dll_82519ec661270f7f484f\"))(\"./node_modules/react/index.js\");","import React from 'react'\n\nimport Welcome from '../src/components/screens/indexes/Welcome'\nimport Navbar from '../src/components/screens/indexes/Navbar'\nimport Feature from '../src/components/screens/indexes/Feature'\nimport Framework from '../src/components/screens/indexes/Framework'\nimport Love from '../src/components/screens/indexes/Love'\nimport CSVParsing from '../src/components/screens/indexes/CSVParsing'\nimport Delimiter from '../src/components/screens/indexes/Delimiter'\nimport LocalFile from '../src/components/screens/indexes/LocalFile'\nimport RemoteFile from '../src/components/screens/indexes/RemoteFile'\nimport Stream from '../src/components/screens/indexes/Stream'\nimport Worker from '../src/components/screens/indexes/Worker'\nimport Header from '../src/components/screens/indexes/Header'\nimport TypeConversion from '../src/components/screens/indexes/TypeConversion'\nimport Comment from '../src/components/screens/indexes/Comment'\nimport Error from '../src/components/screens/indexes/Error'\nimport Unparse from '../src/components/screens/indexes/Unparse'\nimport Download from '../src/components/screens/indexes/Download'\n\nconst Index = () => {\n  return (\n    <>\n      <Welcome />\n      <main>\n        <Navbar />\n        <Feature />\n        <Framework />\n        <Love />\n        <CSVParsing />\n        <Delimiter />\n        <LocalFile />\n        <RemoteFile />\n        <Stream />\n        <Worker />\n        <Header />\n        <TypeConversion />\n        <Comment />\n        <Error />\n        <Unparse />\n        <Download />\n      </main>\n    </>\n  )\n}\n\nexport default Index\n","import React from 'react'\n\nconst CSVParsing = () => {\n  return (\n    <section id='parse'>\n      <div className='grid-container narrow-grid'>\n        <div className='grid-100'>\n          <h4>CSV Parsing</h4>\n          <h5>\"Isn't parsing CSV just <code>String.split(',')</code>?\"</h5>\n          <p>react-papaparse does it right. Just pass in the CSV string with an optional <a href='/docs#config'>configuration</a>.</p>\n          <pre>\n            <code className='language-javascript'>\n              {`import { readString } from 'react-papaparse'\n\nconst results = readString(csvString, config)\n\n/*\nresults = {\n  data: [ ... ],    // parsed data\n  errors: [ ... ],  // errors encountered\n  meta: { ... }     // extra parse info\n}\n*/`}\n            </code>\n          </pre>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default CSVParsing\n","import React from 'react'\n\nconst Comment = () => {\n  return (\n    <section id='comments'>\n      <div className='grid-container narrow-grid'>\n        <div className='grid-100'>\n          <h4>Comments</h4>\n          <h5>\"I forgot to mention: my CSV files have comments in them.\"</h5>\n          <p>Okay, first off: that's really weird. But fortunately, you can skip those lines... just specify the comment string.</p>\n          <pre>\n            <code className='language-javascript'>\n              {`// Mostly found in academia, some CSV files\n// may have commented lines in them\nconst results = readString(csvString {\n  comments: '#'\n})`}\n            </code>\n          </pre>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Comment\n","import React from 'react'\n\nconst Delimiter = () => {\n  return (\n    <section id='delimiter'>\n      <div className='grid-container narrow-grid'>\n        <div className='grid-100'>\n          <h4>Delimiter Detection</h4>\n          <h5>\"But I don't know the delimiter...\"</h5>\n          <p>That's okay. react-papaparse will scan the first few rows to find the right delimiter.</p>\n          <pre>\n            <code className='language-javascript'>\n              {`import { readString } from 'react-papaparse'\n\nconst results = readString(csvString)\n\nconsole.log(results.meta.delimiter)\n\n`}\n              <span>{String.fromCharCode(47)}{String.fromCharCode(47)} \"{String.fromCharCode(92)}t\"</span>\n            </code>\n          </pre>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Delimiter\n","import React from 'react'\n\nconst Download = () => {\n  return (\n    <section id='download'>\n      <div className='grid-container'>\n        <div className='grid-100'>\n          <h3>Install</h3>\n        </div>\n        <div className='prefix-30 grid-40 suffix-30'>\n          <b style={{ display: 'block', textAlign: 'center' }}>npm</b>\n          <pre><code className='language-bash'>$ npm install --save react-papaparse</code></pre>\n          <br />\n          <b style={{ display: 'block', textAlign: 'center' }}>yarn</b>\n          <pre><code className='language-bash'>$ yarn add react-papaparse</code></pre>\n        </div>\n        <div className='clear' />\n        <div className='grid-100 text-center'>\n          <br /><br />\n          <a href='https://github.com/Bunlong/react-papaparse' className='button'>\n            <i className='fa fa-github' />&nbsp; GitHub\n          </a>\n          <a href='/demo' className='button red'>\n            <i className='fa fa-magic' />&nbsp; Demo\n          </a>\n          <a href='/docs' className='button gray'>\n            <i className='fa fa-book' />&nbsp; Documentation\n          </a>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Download\n","import React from 'react'\n\nconst Error = () => {\n  return (\n    <section id='errors'>\n      <div className='grid-container narrow-grid'>\n        <div className='grid-100'>\n          <h4>Error Handling</h4>\n          <h5>\"Aw, shoot. Errors.\"</h5>\n          <p>react-papaparse handles errors pretty well. The <a href='http://tools.ietf.org/html/rfc4180'>CSV standard</a> is somewhat <strike>loose</strike> ambiguous, so react-papaparse is designed for edge cases. For example, mismatched fields won't break parsing.</p>\n          <pre>\n            <code className='language-javascript'>\n              {`// Example error:\n{\n  type: 'FieldMismatch',\n  code: 'TooManyFields',\n  message: 'Expected 3 fields, but parsed 4',\n  row: 1\n}`}\n            </code>\n          </pre>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Error\n","import React from 'react'\n\nconst Feature = () => {\n  return (\n    <section style={{ paddingTop: 0 }}>\n      <div className='grid-container'>\n        <div className='grid-100'>\n          <h3>Features</h3>\n        </div>\n      </div>\n      <div id='ticker'>\n        <div className='ticker-item current'>\n          <p>Now the fastest React CSV parser for the browser</p>\n        </div>\n        <div className='ticker-item'>\n          <p>The world's first multi-threaded CSV parser for the browser</p>\n        </div>\n        <div className='ticker-item'>\n          <p>react-papaparse can handle files gigabytes in size without crashing</p>\n        </div>\n        <div className='ticker-item'>\n          <p>Use react-papaparse when performance, privacy, and correctness matter to you</p>\n        </div>\n        <div className='ticker-item'>\n          <p>react-papaparse alleviates privacy concerns related to uploading files</p>\n        </div>\n        <div className='ticker-item'>\n          <p>Malformed CSV is handled gracefully with a detailed error report</p>\n        </div>\n      </div>\n      <div className='grid-container'>\n        <div className='grid-33'>\n          <li>CSV&#8594;JSON and <a href='#unparse'>JSON&#8594;CSV</a></li>\n          <li>Auto-detect <a href='#delimiter'>delimiter</a></li>\n          <li><a href='#local-files'>Open local files</a></li>\n          <li><a href='#remote-files'>Download remote files</a></li>\n        </div>\n        <div className='grid-33'>\n          <li><a href='#stream'>Stream</a> local and remote files</li>\n          <li><a href='#worker'>Multi-threaded</a></li>\n          <li><a href='#header'>Header row</a> support</li>\n          <li><a href='#type-conversion'>Type conversion</a></li>\n        </div>\n        <div className='grid-33'>\n          <li>Skip <a href='#comments'>commented lines</a></li>\n          <li>Fast mode</li>\n          <li>Graceful <a href='#errors'>error</a> handling</li>\n          <li>Easy to use</li>\n        </div>\n        <div className='clear' /><br /><br />\n        <div className='grid-100 text-center'>\n          <a href='https://github.com/Bunlong/react-papaparse' className='button'>\n            <i className='fa fa-github' />&nbsp; GitHub\n          </a>\n          <a href='/docs' className='button gray'>\n            <i className='fa fa-book' />&nbsp; Documentation\n          </a>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Feature\n","import React from 'react'\n\nconst Framework = () => {\n  return (\n    <section>\n      <div className='grid-container narrow-grid'>\n        <div className='grid-100'>\n          <h3>Frameworks</h3>\n          <p>\n            react-papaparse strongly support <a href='https://nextjs.org' target='blank'>Next.js</a>, <a href='https://create-react-app.dev' target='blank'>Create React App</a> and other React frameworks. react-papaparse is the fastest React CSV parser for the browser (only works in the browser), so you need to set the component with no SSR (server-side render) <b>in case you use <code>readRemoteFile</code> function</b>.\n          </p>\n          <p>\n            <ul>\n              <li><a href='https://nextjs.org/docs/advanced-features/dynamic-import#with-no-ssr' target='blank'>Next.js — component with no SSR</a></li>\n            </ul>\n          </p>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Framework\n","import React from 'react'\n\nconst Header = () => {\n  return (\n    <section id='header'>\n      <div className='grid-container narrow-grid'>\n        <div className='grid-100'>\n          <h4>Header Row</h4>\n          <h5>\"Great! Now I want data keyed by field name.\"</h5>\n          <p>If you tell react-papaparse there is a header row, each row will be organized by field name instead of index.</p>\n          <pre>\n            <code className='language-javascript'>\n              {`// Key data by field name instead of index/position\nconst results = readString(csvString {\n  header: true\n})`}\n            </code>\n          </pre>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Header\n","import React from 'react'\n\nconst LocalFile = () => {\n  return (\n    <section id='local-files'>\n      <div className='grid-container narrow-grid'>\n        <div className='grid-100'>\n          <h4>Local Files</h4>\n          <h5>\"Great, but I have a <i>file</i> to parse.\"</h5>\n          <p>Then use CSVReader component instead of readString method. Since file parsing is asynchronous, don't forget callback methods.</p>\n\n          <div\n            id='drag-no-click-upload'\n            style={{ fontSize: 20, marginTop: 10 }}\n          >\n            Basic Upload\n          </div>\n          <div style={{ textAlign: 'center', paddingTop: 50, paddingBottom: 50 }}>\n            <img\n              src='/static/images/csvreader1.png'\n              alt='Basic Upload'\n              style={{ maxWidth: '100%', height: 'auto' }}\n            />\n          </div>\n          <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: 14 }}>\n            <a href='/docs#basic-upload'>Properties</a>&nbsp; | &nbsp;<a href='/demo'>Demo</a>\n          </div>\n          <pre>\n            <code className='language-javascript'>\n              {`import React, { Component } from 'react'\n\nimport { CSVReader } from 'react-papaparse'\n\nconst buttonRef = React.createRef()\n\nexport default class CSVReader extends Component {\n  handleOnFileLoad = (data) => {\n    console.log('--------------------------------------------------')\n    console.log(data)\n    console.log('--------------------------------------------------')\n  }\n\n  handleOnError = (err, file, inputElem, reason) => {\n    console.log(err)\n  }\n\n  handleOpenDialog = (e) => {\n    // Note that the ref is set async, so it might be null at some point \n    if (buttonRef.current) {\n      buttonRef.current.open(e)\n    }\n  }\n\n  render() {\n    return (\n      <CSVReader\n        ref={buttonRef}\n        onFileLoad={this.handleOnFileLoad}\n        onError={this.handleOnError}\n        noClick\n        noDrag\n      >\n        {({file}) => (\n          <aside style={{display: 'flex', flexDirection: 'row', marginBottom: 10}}>\n            <button\n              type='button'\n              onClick={this.handleOpenDialog}\n              style={{\n                width: '40%',\n                borderRadius: 0,\n                marginLeft: 0,\n                marginRight: 0,\n                paddingLeft: 0,\n                paddingRight: 0,\n              }}\n            >\n              Browe file\n            </button>\n            <div\n              style={{\n                width: '60%',\n                height: 45,\n                borderWidth: 1,\n                borderStyle: 'solid',\n                borderColor: '#ccc',\n                marginTop: 5,\n                marginBottom: 5,\n                paddingLeft: 13,\n                paddingTop: 3,\n                lineHeight: 2.2,\n              }}\n            >\n              {file.name}\n            </div>\n          </aside>\n        )}\n      </CSVReader>\n    )\n  }\n}`}\n            </code>\n          </pre>\n\n          <div\n            id='drag-no-click-upload'\n            style={{ fontSize: 20, marginTop: 35 }}\n          >\n            Click and Drag Upload\n          </div>\n          <div style={{ textAlign: 'center', paddingTop: 50, paddingBottom: 50 }}>\n            <img\n              src='/static/images/csvreader2.png'\n              alt='Click and Drag Upload'\n              style={{ maxWidth: '100%', height: 'auto' }}\n            />\n          </div>\n          <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: 14 }}>\n            <a href='/docs#click-and-drag-upload'>Properties</a>&nbsp; | &nbsp;<a href='/demo'>Demo</a>\n          </div>\n          <pre>\n            <code className='language-javascript'>\n              {`import React, { Component } from 'react'\n\nimport { CSVReader } from 'react-papaparse'\n\nexport default class CSVReader extends Component {\n  handleOnDrop = (data) => {\n    console.log('--------------------------------------------------')\n    console.log(data)\n    console.log('--------------------------------------------------')\n  }\n\n  handleOnError = (err, file, inputElem, reason) => {\n    console.log(err)\n  }\n\n  render() {\n    return (\n      <CSVReader \n        onDrop={this.handleOnDrop}\n        onError={this.handleOnError}\n      >\n        <span>Drop CSV file here or click to upload.</span>\n      </CSVReader>\n    )\n  }\n}\n`}\n            </code>\n          </pre>\n\n          <div\n            id='drag-no-click-upload'\n            style={{ fontSize: 20, marginTop: 35 }}\n          >\n            Drag ( No Click ) Upload\n          </div>\n          <div style={{ textAlign: 'center', paddingTop: 50, paddingBottom: 50 }}>\n            <img\n              src='/static/images/csvreader3.png'\n              alt='Drag ( No Click ) Upload'\n              style={{ maxWidth: '100%', height: 'auto' }}\n            />\n          </div>\n          <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: 14 }}>\n            <a href='/docs#drag-no-click-upload'>Properties</a>&nbsp; | &nbsp;<a href='/demo'>Demo</a>\n          </div>\n          <pre>\n            <code className='language-javascript'>\n              {`import React, { Component } from 'react'\n\nimport { CSVReader } from 'react-papaparse'\n\nexport default class CSVReader extends Component {\n  handleOnDrop = (data) => {\n    console.log('--------------------------------------------------')\n    console.log(data)\n    console.log('--------------------------------------------------')\n  }\n\n  handleOnError = (err, file, inputElem, reason) => {\n    console.log(err)\n  }\n\n  render() {\n    return (\n      <CSVReader\n        onDrop={this.handleOnDrop}\n        onError={this.handleOnError}\n        noClick\n      >\n        <span>Drop CSV file here to upload.</span>\n      </CSVReader>\n    )\n  }\n}`}\n            </code>\n          </pre>\n\n          <div\n            id='drag-no-click-upload'\n            style={{ fontSize: 20, marginTop: 35 }}\n          >\n            Click ( No Drag ) Upload\n          </div>\n          <div style={{ textAlign: 'center', paddingTop: 50, paddingBottom: 50 }}>\n            <img\n              src='/static/images/csvreader4.png'\n              alt='Click ( No Drag ) Upload'\n              style={{ maxWidth: '100%', height: 'auto ' }}\n            />\n          </div>\n          <div style={{ display: 'flex', justifyContent: 'flex-end', marginBottom: 14 }}>\n            <a href='/docs#click-no-drag-upload'>Properties</a>&nbsp; | &nbsp;<a href='/demo'>Demo</a>\n          </div>\n          <pre>\n            <code className='language-javascript'>\n              {`import React, { Component } from 'react'\n\nimport { CSVReader } from 'react-papaparse'\n\nexport default class CSVReader extends Component {\n  handleOnDrop = (data) => {\n    console.log('--------------------------------------------------')\n    console.log(data)\n    console.log('--------------------------------------------------')\n  }\n\n  handleOnError = (err, file, inputElem, reason) => {\n    console.log(err)\n  }\n\n  render() {\n    return (\n      <CSVReader\n        onDrop={this.handleOnDrop}\n        onError={this.handleOnError}\n        noDrag\n      >\n        <span>Click to upload.</span>\n      </CSVReader>\n    )\n  }\n}`}\n            </code>\n          </pre>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default LocalFile\n","import React from 'react'\n\nconst Love = () => {\n  return (\n    <section>\n      <div className='grid-container'>\n        <div className='grid-100 text-center'>\n          <h3>People <i className='fa fa-heart' /> react-papaparse</h3>\n          <p>\n            <a href='https://www.npmjs.com/package/react-papaparse'>\n              <img src='https://img.shields.io/npm/dm/react-papaparse.svg' alt='react-papaparse' />\n            </a>\n          </p>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Love\n","import React from 'react'\n\nconst Navbar = () => {\n  return (\n    <>\n      <header>\n        <div className='grid-container'>\n          <div className='grid-40 mobile-grid-50'>\n            <div className='links'>\n              <a href='/demo'>\n                <i className='fa fa-magic fa-lg' /> Demo\n              </a>\n              <a href='/docs'>\n                <i className='fa fa-book fa-lg' /> Docs\n              </a>\n            </div>\n          </div>\n          <div className='grid-20 hide-on-mobile text-center'>\n            <a href='/' className='text-logo'>react-papaparse 3</a>\n          </div>\n          <div className='grid-40 mobile-grid-50 text-right'>\n            <div className='links'>\n              <a href='https://github.com/Bunlong/react-papaparse'>\n                <i className='fa fa-github fa-lg' /> GitHub\n              </a>\n            </div>\n          </div>\n        </div>\n      </header>\n      <div className='insignia'>\n        <div className='firefox-hack'>\n          <div id='version-intro'>Version</div>\n          <div id='version'>3</div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Navbar\n","import React from 'react'\n\nconst RemoteFile = () => {\n  return (\n    <section id='remote-files'>\n      <div className='grid-container narrow-grid'>\n        <div className='grid-100'>\n          <h4>Remote Files</h4>\n          <h5>\"No &mdash; I mean, the file isn't on my computer.\"</h5>\n          <p>Oh, well then just pass in the URL and &mdash; of course &mdash; a callback.</p>\n          <pre>\n            <code className='language-javascript'>\n              {`readRemoteFile('http://example.com/file.csv', {\n  download: true,\n  complete: function(results) {\n    console.log(results)\n  }\n})`}\n            </code>\n          </pre>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default RemoteFile\n","import React from 'react'\n\nconst Stream = () => {\n  return (\n    <section id='stream'>\n      <div className='grid-container narrow-grid'>\n        <div className='grid-100'>\n          <h4>Streaming</h4>\n          <h5>\"Did I mention the file is huge?\"</h5>\n          <p>That's what streaming is for. Specify a step callback to receive the results row-by-row. This way, you won't load the whole file into memory and crash the browser.</p>\n          <pre>\n            <code className='language-javascript'>\n              {`readRemoteFile('http://example.com/big.csv', {\n  step: function(row) {\n    console.log('Row:', row.data)\n  },\n  complete: function() {\n    console.log('All done!')\n  }\n})`}\n            </code>\n          </pre>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Stream\n","import React from 'react'\n\nconst TypeConversion = () => {\n  return (\n    <section id='type-conversion'>\n      <div className='grid-container narrow-grid'>\n        <div className='grid-100'>\n          <h4>Type Conversion</h4>\n          <h5>\"Hey, these numbers are parsed as strings.\"</h5>\n          <p><i>Everything</i> is parsed as strings. If you want numbers and booleans, you can enable dynamic typing to do the conversion for you.</p>\n          <pre>\n            <code className='language-javascript'>\n              {`// Converts numeric/boolean data\nconst results = readString(csvString {\n  dynamicTyping: true\n})`}\n            </code>\n          </pre>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default TypeConversion\n","import React from 'react'\n\nconst Unparse = () => {\n  return (\n    <section id='unparse'>\n      <div className='grid-container narrow-grid'>\n        <div className='grid-100'>\n          <h4>JSON to CSV</h4>\n          <h5>\"Last thing: what about converting JSON to CSV?\"</h5>\n          <p>Use <code>jsonToCSV()</code> function, passing in your array of arrays or array of objects. react-papaparse will figure it out.</p>\n          <pre>\n            <code className='language-javascript'>\n              {`// Output is a properly-formatted CSV string.\nconst csv = jsonToCSV(jsonData)\n`}\n            </code>\n          </pre>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Unparse\n","import React from 'react'\n\nconst Welcome = () => {\n  return (\n    <div id='skrollr-body'>\n      <div\n        id='top'\n        data-top='bottom: 0px; opacity: 1;'\n        data-top-bottom='bottom: -350px; opacity: .3;'\n      >\n        <div className='grid-container'>\n          <div className='grid-100'>\n            <div id='title-main'>\n              <h1>react-papaparse</h1>\n              <h2>The powerful, in-browser React CSV parser for big boys and girls</h2>\n\n              <a href='#download' className='button'>\n                <i className='fa fa-download' />&nbsp; Install\n              </a>\n              <a href='/demo' className='button red'>\n                <i className='fa fa-magic' />&nbsp; Demo\n              </a>\n              <a href='/docs' className='button gray'>\n                <i className='fa fa-book' />&nbsp; Documentation\n              </a>\n            </div>\n            <div id='title-code'>\n              <pre>\n                <code className='language-javascript'>\n                  {`// Parse CSV string\nconst data = readString(csvString)\n\n// Convert back to CSV\nconst csv = jsonToCSV(jsonData)\n\n// Parse local CSV file\n<CSVReader \n  onDrop={this.handleOnDrop}\n  onError={this.handleOnError}\n  noDrag\n>\n  <span>Click to upload.</span>\n</CSVReader>\n\n// Stream big file in worker thread\nreadRemoteFile(bigFileURL, {\n  worker: true,\n  step: function(results) {\n    console.log('Row:', results.data)\n  }\n})`}\n                </code>\n              </pre>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Welcome\n","import React from 'react'\n\nconst Worker = () => {\n  return (\n    <section id='worker'>\n      <div className='grid-container narrow-grid'>\n        <div className='grid-100'>\n          <h4>Multi-Threading</h4>\n          <h5>'Lovely. Now my web page locked up.'</h5>\n          <p>That happens when a long-running script is executing in the same thread as the page. Use a <a href='https://developer.mozilla.org/en-US/docs/Web/API/Worker'>Worker</a> thread by specifying <code>worker: true</code>. It may take slightly longer, but your page will stay reactive.</p>\n          <pre>\n            <code className='language-javascript'>\n              {`readRemoteFile(bigFileURL, {\n  worker: true,\n  step: function(row) {\n    console.log('Row:', row.data)\n  },\n  complete: function() {\n    console.log('All done!')\n  }\n})`}\n            </code>\n          </pre>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nexport default Worker\n","module.exports = dll_82519ec661270f7f484f;"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC9CA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;;AClCA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACxgCA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC5PA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC7BA;;;;A","sourceRoot":""}