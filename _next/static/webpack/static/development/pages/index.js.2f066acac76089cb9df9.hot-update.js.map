{"version":3,"file":"static/webpack/static/development/pages/index.js.2f066acac76089cb9df9.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { Component } from 'react'\n\nexport default class Index extends Component {\n  \n  render() {\n    return (\n      <>\n        <div id=\"skrollr-body\">\n          <div id=\"top\" data-top=\"bottom: 0px; opacity: 1;\" data-top-bottom=\"bottom: -350px; opacity: .3;\">\n            <div className=\"grid-container\">\n              <div className=\"grid-100\">\n                <div id=\"title-main\">\n                  <h1>react-papaparse</h1>\n                  <h2>The powerful, in-browser React CSV parser for big boys and girls</h2>\n\n                  <a href=\"#download\" className=\"button\">\n                    <i className=\"fa fa-download\"></i>&nbsp; Install\n                  </a>\n                  <a href=\"/demo\" className=\"button red\">\n                    <i className=\"fa fa-magic\"></i>&nbsp; Demo\n                  </a>\n                  <a href=\"/docs\" className=\"button gray\">\n                    <i className=\"fa fa-book\"></i>&nbsp; Documentation\n                  </a>\n                </div>\n                <div id=\"title-code\">\n                  <pre><code className=\"language-javascript\">{`// Parse CSV string\nvar data = readString(csvString)\n\n// Convert back to CSV\nvar csv = jsonToCSV(jsonData)\n\n// Parse local CSV file\n<CSVReader \n  onDrop={this.onDrop}\n  onError={this.onError}\n  noDrag\n>\n  <span>Click to upload.</span>\n</CSVReader>\n\n// Stream big file in worker thread\nreadRemoteFile(bigFileURL, {\n  worker: true,\n  step: function(results) {\n    console.log('Row:', results.data)\n  }\n})`}</code></pre>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n        <main>\n          <header>\n            <div className=\"grid-container\">\n              <div className=\"grid-40 mobile-grid-50\">\n                <div className=\"links\">\n                  <a href=\"/demo\">\n                    <i className=\"fa fa-magic fa-lg\"></i> Demo\n                  </a>\n                  <a href=\"/docs\">\n                    <i className=\"fa fa-book fa-lg\"></i> Docs\n                  </a>\n                </div>\n              </div>\n              <div className=\"grid-20 hide-on-mobile text-center\">\n                <a href=\"/\" className=\"text-logo\">react-papaparse 2</a>\n              </div>\n              <div className=\"grid-40 mobile-grid-50 text-right\">\n                <div className=\"links\">\n                  <a href=\"https://github.com/Bunlong/react-papaparse\">\n                    <i className=\"fa fa-github fa-lg\"></i> GitHub\n                  </a>\n                </div>\n              </div>\n            </div>\n          </header>\n\n          <div className=\"insignia\">\n            <div className=\"firefox-hack\"><div id=\"version-intro\">Version</div><div id=\"version\">2.0</div></div>\n          </div>\n\n          <section style={{paddingTop: 0}}>\n            <div className=\"grid-container\">\n              <div className=\"grid-100\">\n                <h3>Features</h3>\n              </div>\n            </div>\n\n            <div id=\"ticker\">\n              <div className=\"ticker-item current\">\n                <p>Now the fastest React CSV parser for the browser</p>\n              </div>\n              <div className=\"ticker-item\">\n                <p>The world's first multi-threaded CSV parser for the browser</p>\n              </div>\n              <div className=\"ticker-item\">\n                <p>react-papaparse can handle files gigabytes in size without crashing</p>\n              </div>\n              <div className=\"ticker-item\">\n                <p>Use react-papaparse when performance, privacy, and correctness matter to you</p>\n              </div>\n              <div className=\"ticker-item\">\n                <p>react-papaparse alleviates privacy concerns related to uploading files</p>\n              </div>\n              <div className=\"ticker-item\">\n                <p>Malformed CSV is handled gracefully with a detailed error report</p>\n              </div>\n            </div>\n\n            <div className=\"grid-container\">\n              <div className=\"grid-33\">\n                <li>CSV&#8594;JSON and <a href=\"#unparse\">JSON&#8594;CSV</a></li>\n                <li>Auto-detect <a href=\"#delimiter\">delimiter</a></li>\n                <li><a href=\"#local-files\">Open local files</a></li>\n                <li><a href=\"#remote-files\">Download remote files</a></li>\n              </div>\n\n              <div className=\"grid-33\">\n                <li><a href=\"#stream\">Stream</a> local and remote files</li>\n                <li><a href=\"#worker\">Multi-threaded</a></li>\n                <li><a href=\"#header\">Header row</a> support</li>\n                <li><a href=\"#type-conversion\">Type conversion</a></li>\n              </div>\n\n              <div className=\"grid-33\">\n                <li>Skip <a href=\"#comments\">commented lines</a></li>\n                <li>Fast mode</li>\n                <li>Graceful <a href=\"#errors\">error</a> handling</li>\n                <li>Easy to use</li>\n              </div>\n\n              <div className=\"clear\" /><br/><br/>\n              <div className=\"grid-100 text-center\">\n                <a href=\"https://github.com/Bunlong/react-papaparse\" className=\"button\">\n                  <i className=\"fa fa-github\"></i>&nbsp; GitHub\n                </a>\n                <a href=\"/docs\" className=\"button gray\">\n                  <i className=\"fa fa-book\"></i>&nbsp; Documentation\n                </a>\n              </div>\n            </div>\n          </section>\n\n          <section>\n            <div className=\"grid-container narrow-grid\">\n              <div className=\"grid-100\">\n                <h3>Frameworks</h3>\n                <p>\n                  react-papaparse strongly support <a href=\"https://nextjs.org\" target=\"blank\">Next</a>, <a href=\"https://create-react-app.dev\" target=\"blank\">Create React App</a> and other React frameworks. react-papaparse is the fastest React CSV parser for the browser (only works in the browser), so you need to set the component with no SSR (server-side render) <b>in case you use <code>readRemoteFile</code> function</b>.\n                </p>\n                <p>\n                  <ul>\n                    <li><a href=\"https://nextjs.org/docs/advanced-features/dynamic-import#with-no-ssr\" target=\"blank\">Next â€” component with no SSR</a></li>\n                  </ul>\n                </p>\n              </div>\n            </div>\n          </section>\n\n          <section>\n            <div className=\"grid-container\">\n              <div className=\"grid-100 text-center\">\n                <h3>People <i className=\"fa fa-heart\"></i> react-papaparse</h3>\n                <p>\n                  <a href='https://www.npmjs.com/package/react-papaparse'>\n                    <img src=\"https://img.shields.io/npm/dm/react-papaparse.svg\" alt='react-papaparse' />\n                  </a>\n                </p>\n              </div>\n            </div>\n          </section>\n\n          <section id=\"parse\">\n            <div className=\"grid-container narrow-grid\">\n              <div className=\"grid-100\">\n                <h4>CSV Parsing</h4>\n                <h5>\"Isn't parsing CSV just <code>String.split(',')</code>?\"</h5>\n\n                <p>react-papaparse does it right. Just pass in the CSV string with an optional <a href=\"/docs#config\">configuration</a>.</p>\n\n                <pre><code className=\"language-javascript\">{`\nimport { readString } from 'react-papaparse'\n\nvar results = readString(csvString, config)\n\n/*\n  results = {\n    data: [ ... ],    // parsed data\n    errors: [ ... ],  // errors encountered\n    meta: { ... }     // extra parse info\n  }\n*/`}\n</code></pre>\n              </div>\n            </div>\n          </section>\n\n          <section id=\"delimiter\">\n            <div className=\"grid-container narrow-grid\">\n              <div className=\"grid-100\">\n                <h4>Delimiter Detection</h4>\n                <h5>\"But I don't know the delimiter...\"</h5>\n\n                <p>That's okay. react-papaparse will scan the first few rows to find the right delimiter.</p>\n\n                <pre><code className=\"language-javascript\">{`\nimport { readString } from 'react-papaparse'\n\nvar results = readString(csvString)\n\nconsole.log(results.meta.delimiter)\n\n`}\n\n// <span dangerouslySetInnerHTML={{__html: '&bsol;t'}} />\n</code></pre>\n              </div>\n            </div>\n          </section>\n\n          <section id=\"local-files\">\n            <div className=\"grid-container narrow-grid\">\n              <div className=\"grid-100\">\n                <h4>Local Files</h4>\n                <h5>\"Great, but I have a <i>file</i> to parse.\"</h5>\n\n                <p>Then use CSVReader component instead of readString method. Since file parsing is asynchronous, don't forget callback methods.</p>\n\n                <div id=\"drag-no-click-upload\" style={{fontSize: 20, marginTop: 10,}}>\n                  Basic Upload\n                </div>\n\n                <div style={{textAlign: 'center', paddingTop: 50, paddingBottom: 50, }}>\n                  <img src='/static/images/csvreader1.png' alt='Basic Upload' style={{maxWidth: '100%', height: \n                'auto'}} />\n                </div>\n\n                <div style={{display: 'flex', justifyContent: 'flex-end', marginBottom: 14}}>\n                  <a href='/docs#basic-upload'>Document</a>&nbsp; | &nbsp;<a href='/demo'>Demo</a>\n                </div>\n\n                <pre><code className=\"language-javascript\">{`import React, { Component } from 'react'\n\nimport { CSVReader } from 'react-papaparse'\n\nconst buttonRef = React.createRef()\n\nexport default class CSVReader extends Component {\n\n  onFileLoad = (data) => {\n    console.log('--------------------------------------------------')\n    console.log(data)\n    console.log('--------------------------------------------------')\n  }\n\n  onError = (err, file, inputElem, reason) => {\n    console.log(err)\n  }\n\n  openDialog = (e) => {\n    // Note that the ref is set async, so it might be null at some point \n    if (buttonRef.current) {\n      buttonRef.current.open(e)\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <CSVReader\n          ref={buttonRef}\n          onFileLoad={this.onFileLoad}\n          onError={this.onError}\n          noClick\n          noDrag\n          config={{}}\n        >\n          {({file}) => (\n            <>\n              <aside style={{display: 'flex', flexDirection: 'row', marginBottom: 10}}>\n                <button\n                  type=\"button\"\n                  onClick={this.openDialog}\n                  style={{\n                    width: '40%',\n                    borderRadius: 0,\n                    marginLeft: 0,\n                    marginRight: 0,\n                    paddingLeft: 0,\n                    paddingRight: 0,\n                  }}\n                >\n                  Browe file\n                </button>\n                <div\n                  style={{\n                    width: '60%',\n                    height: 45,\n                    borderWidth: 1,\n                    borderStyle: 'solid',\n                    borderColor: '#ccc',\n                    marginTop: 5,\n                    marginBottom: 5,\n                    paddingLeft: 13,\n                    paddingTop: 3,\n                    lineHeight: 2.2,\n                  }}\n                >\n                  {file.name}\n                </div>\n              </aside>\n            </>\n          )}\n        </CSVReader>\n      </>\n    )\n  }\n}\n`}</code></pre>\n\n              <div id=\"drag-no-click-upload\" style={{fontSize: 20, marginTop: 35,}}>\n                Click and Drag Upload\n              </div>\n\n              <div style={{textAlign: 'center', paddingTop: 50, paddingBottom: 50, }}>\n                <img src='/static/images/csvreader2.png' alt='Basic Upload' style={{maxWidth: '100%', height: \n              'auto'}} />\n              </div>\n\n              <div style={{display: 'flex', justifyContent: 'flex-end', marginBottom: 14}}>\n                <a href='/docs#click-and-drag-upload'>Properties</a>&nbsp; | &nbsp;<a href='/demo'>Demo</a>\n              </div>\n\n              <pre><code className=\"language-javascript\">{`import React, { Component } from 'react'\n\nimport { CSVReader } from 'react-papaparse'\n\nexport default class CSVReader extends Component {\n\n  onDrop = (data) => {\n    console.log('--------------------------------------------------')\n    console.log(data)\n    console.log('--------------------------------------------------')\n  }\n\n  onError = (err, file, inputElem, reason) => {\n    console.log(err)\n  }\n\n  render() {\n    return (\n      <>\n        <CSVReader \n          onDrop={this.onDrop}\n          onError={this.onError}\n          style={{}}\n          config={{}}\n        >\n          <span>Drop CSV file here or click to upload.</span>\n        </CSVReader>\n      </>\n    )\n  }\n}\n`}</code></pre>\n\n                <div id=\"drag-no-click-upload\" style={{fontSize: 20, marginTop: 35,}}>\n                  Drag ( No Click ) Upload\n                </div>\n\n                <div style={{textAlign: 'center', paddingTop: 50, paddingBottom: 50, }}>\n                  <img src='/static/images/csvreader3.png' alt='Basic Upload' style={{maxWidth: '100%', height: \n                'auto'}} />\n                </div>\n\n                <div style={{display: 'flex', justifyContent: 'flex-end', marginBottom: 14}}>\n                  <a href='/docs#drag-no-click-upload'>Properties</a>&nbsp; | &nbsp;<a href='/demo'>Demo</a>\n                </div>\n\n                <pre><code className=\"language-javascript\">{`import React, { Component } from 'react'\n\nimport { CSVReader } from 'react-papaparse'\n\nexport default class CSVReader extends Component {\n\n  onDrop = (data) => {\n    console.log('--------------------------------------------------')\n    console.log(data)\n    console.log('--------------------------------------------------')\n  }\n\n  onError = (err, file, inputElem, reason) => {\n    console.log(err)\n  }\n\n  render() {\n    return (\n      <>\n        <CSVReader\n          onDrop={this.onDrop}\n          onError={this.onError}\n          noClick\n          style={{}}\n          config={{}}\n        >\n          <span>Drop CSV file here to upload.</span>\n        </CSVReader>\n      </>\n    )\n  }\n}\n`}</code></pre>\n              \n                <div id=\"drag-no-click-upload\" style={{fontSize: 20, marginTop: 35,}}>\n                  Click ( No Drag ) Upload\n                </div>\n\n                <div style={{textAlign: 'center', paddingTop: 50, paddingBottom: 50, }}>\n                  <img src='/static/images/csvreader4.png' alt='Basic Upload' style={{maxWidth: '100%', height: \n                'auto'}} />\n                </div>\n\n                <div style={{display: 'flex', justifyContent: 'flex-end', marginBottom: 14}}>\n                  <a href='/docs#click-no-drag-upload'>Properties</a>&nbsp; | &nbsp;<a href='/demo'>Demo</a>\n                </div>\n\n                <pre><code className=\"language-javascript\">{`import React, { Component } from 'react'\n\nimport { CSVReader } from 'react-papaparse'\n\nexport default class CSVReader extends Component {\n\n  onDrop = (data) => {\n    console.log('--------------------------------------------------')\n    console.log(data)\n    console.log('--------------------------------------------------')\n  }\n\n  onError = (err, file, inputElem, reason) => {\n    console.log(err)\n  }\n\n  render() {\n    return (\n      <>\n        <CSVReader\n          onDrop={this.onDrop}\n          onError={this.onError}\n          noDrag\n          style={{}}\n          config={{}}\n        >\n          <span>Click to upload.</span>\n        </CSVReader>\n      </>\n    )\n  }\n}\n`}</code></pre>\n\n              </div>\n            </div>\n          </section>\n\n          <section id=\"remote-files\">\n            <div className=\"grid-container narrow-grid\">\n              <div className=\"grid-100\">\n                <h4>Remote Files</h4>\n                <h5>\"No &mdash; I mean, the file isn't on my computer.\"</h5>\n                <p>Oh, well then just pass in the URL and &mdash; of course &mdash; a callback.</p>\n\n                <pre><code className=\"language-javascript\">{`readRemoteFile('http://example.com/file.csv', {\n  download: true,\n  complete: function(results) {\n    console.log(results)\n  }\n})`}</code></pre>\n              </div>\n            </div>\n          </section>\n\n          <section id=\"stream\">\n            <div className=\"grid-container narrow-grid\">\n              <div className=\"grid-100\">\n                <h4>Streaming</h4>\n                <h5>\"Did I mention the file is huge?\"</h5>\n\n                <p>That's what streaming is for. Specify a step callback to receive the results row-by-row. This way, you won't load the whole file into memory and crash the browser.</p>\n\n                <pre><code className=\"language-javascript\">{`readRemoteFile('http://example.com/big.csv', {\n  step: function(row) {\n    console.log('Row:', row.data)\n  },\n  complete: function() {\n    console.log('All done!')\n  }\n})`}</code></pre>\n              </div>\n            </div>\n          </section>\n\n          <section id=\"worker\">\n            <div className=\"grid-container narrow-grid\">\n              <div className=\"grid-100\">\n                <h4>Multi-Threading</h4>\n                <h5>\"Lovely. Now my web page locked up.\"</h5>\n\n                <p>That happens when a long-running script is executing in the same thread as the page. Use a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Worker\">Worker</a> thread by specifying <code>worker: true</code>. It may take slightly longer, but your page will stay reactive.</p>\n\n                <pre><code className=\"language-javascript\">{`readRemoteFile(bigFileURL, {\n  worker: true,\n  step: function(row) {\n    console.log('Row:', row.data)\n  },\n  complete: function() {\n    console.log('All done!')\n  }\n})`}</code></pre>\n              </div>\n            </div>\n          </section>\n\n          <section id=\"header\">\n            <div className=\"grid-container narrow-grid\">\n              <div className=\"grid-100\">\n                <h4>Header Row</h4>\n                <h5>\"Great! Now I want data keyed by field name.\"</h5>\n\n                <p>If you tell react-papaparse there is a header row, each row will be organized by field name instead of index.</p>\n\n                <pre><code className=\"language-javascript\">{`// Key data by field name instead of index/position\nvar results = readString(csvString {\n  header: true\n})`}</code></pre>\n              </div>\n            </div>\n          </section>\n\n          <section id=\"type-conversion\">\n            <div className=\"grid-container narrow-grid\">\n              <div className=\"grid-100\">\n                <h4>Type Conversion</h4>\n                <h5>\"Hey, these numbers are parsed as strings.\"</h5>\n\n                <p><i>Everything</i> is parsed as strings. If you want numbers and booleans, you can enable dynamic typing to do the conversion for you.</p>\n\n                <pre><code className=\"language-javascript\">{`// Converts numeric/boolean data\nvar results = readString(csvString {\n  header: true\n})`}</code></pre>\n              </div>\n            </div>\n          </section>\n\n          <section id=\"comments\">\n            <div className=\"grid-container narrow-grid\">\n              <div className=\"grid-100\">\n                <h4>Comments</h4>\n                <h5>\"I forgot to mention: my CSV files have comments in them.\"</h5>\n\n                <p>Okay, first off: that's really weird. But fortunately, you can skip those lines... just specify the comment string.</p>\n\n                <pre><code className=\"language-javascript\">{`// Mostly found in academia, some CSV files\n// may have commented lines in them\nvar results = readString(csvString {\n  comments: \"#\"\n})`}</code></pre>\n              </div>\n            </div>\n          </section>\n\n          <section id=\"errors\">\n            <div className=\"grid-container narrow-grid\">\n              <div className=\"grid-100\">\n                <h4>Error Handling</h4>\n                <h5>\"Aw, shoot. Errors.\"</h5>\n\n                <p>react-papaparse handles errors pretty well. The <a href=\"http://tools.ietf.org/html/rfc4180\">CSV standard</a> is somewhat <strike>loose</strike> ambiguous, so react-papaparse is designed for edge cases. For example, mismatched fields won't break parsing.</p>\n\n                <pre><code className=\"language-javascript\">{`// Example error:\n{\n  type: \"FieldMismatch\",\n  code: \"TooManyFields\",\n  message: \"Expected 3 fields, but parsed 4\",\n  row: 1\n}`}</code></pre>\n              </div>\n            </div>\n          </section>\n\n          <section id=\"unparse\">\n            <div className=\"grid-container narrow-grid\">\n              <div className=\"grid-100\">\n                <h4>JSON to CSV</h4>\n                <h5>\"Last thing: what about converting JSON to CSV?\"</h5>\n\n                <p>Use <code>jsonToCSV()</code> function, passing in your array of arrays or array of objects. react-papaparse will figure it out.</p>\n\n                <pre><code className=\"language-javascript\">{`// Output is a properly-formatted CSV string.\nvar csv = jsonToCSV(jsonData)\n`}</code></pre>\n              </div>\n            </div>\n          </section>\n\n          <section id=\"download\">\n            <div className=\"grid-container\">\n              <div className=\"grid-100\">\n                <h3>Install</h3>\n              </div>\n              <div className=\"prefix-30 grid-40 suffix-30\">\n                <b style={{display: 'block', textAlign: 'center'}}>npm</b>\n                <pre><code className=\"language-bash\">$ npm install --save react-papaparse</code></pre>\n                <br/>\n                <b style={{display: 'block', textAlign: 'center'}}>yarn</b>\n                <pre><code className=\"language-bash\">$ yarn add react-papaparse</code></pre>\n              </div>\n\n              <div className=\"clear\"></div>\n\n              <div className=\"grid-100 text-center\">\n                <br/><br/>\n\n                <a href=\"https://github.com/Bunlong/react-papaparse\" className=\"button\">\n                  <i className=\"fa fa-github\"></i>&nbsp; GitHub\n                </a>\n                <a href=\"/demo\" className=\"button red\">\n                  <i className=\"fa fa-magic\"></i>&nbsp; Demo\n                </a>\n                <a href=\"/docs\" className=\"button gray\">\n                  <i className=\"fa fa-book\"></i>&nbsp; Documentation\n                </a>\n              </div>\n            </div>\n          </section>\n        </main>\n      </>\n    )\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;;;;;;;;;;;;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiiCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsanBA;AACA;;;;;A","sourceRoot":""}